name: Release

env:
  DOCKERHUB_PREFIX: "nanitesystems"
  REPO_NAME: ${{ github.repository }}
on:
  push:
    tags:
      - 'v*'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKERHUB_PREFIX }}/${{ env.REPO_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push versioned docker image to Dockerhub
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
#          cache-from: type=registry,ref=${{ github.repository }}:latest
#          cache-to: type=inline

      - name: Push versioned image to GHCR
        uses: docker/build-push-action@v3
        with:
          src: ${{ steps.meta.outputs.tags }}
          dst: |
            ghcr.io/${{ env.REPO_NAME }}/${{ steps.meta.outputs.tags }}

      - name: Push latest image to Dockerhub and GHCR
        uses: docker/build-push-action@v3
        with:
          src: ${{ steps.meta.outputs.tags }}
          dst: | 
            ${{ steps.meta.outputs.tags }}:latest
            ghcr.io/${{ env.REPO_NAME }}/${{ steps.meta.outputs.tags }}:latest

      - name: Image Digest
        run: echo ${{ steps.build.outputs.digest }}
